module IBAF-Statements
            
imports 
  IBAF-Expressions
  Funcons

// Language "IBAFlang"
    
lexical syntax // Language
  
  // # Statements
                   
  
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
syntax // Language
  
  // # Statements
                   
  
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
context-free syntax // Language
  
  // # Statements
                   
  
  L-statement.L-statement--LBRACE-L-statement-S-RBRACE =
    "{" L-statement* "}"
  L-statement.L-statement--R-print-LPAREN-L-exp-RPAREN-SEMI =
    "print" "(" L-exp ")" ";"
  L-statement.L-statement--R-int-L-id-SEMI =
    "int" L-id ";"
  L-statement.L-statement--L-id-EQUALS-L-exp-SEMI =
    L-id "=" L-exp ";"
  L-statement.L-statement--R-int-L-id-EQUALS-L-exp-SEMI =
    "int" L-id "=" L-exp ";"
  L-statement.L-statement--R-return-L-exp-Q-SEMI =
    "return" L-exp? ";"
  L-statement.L-statement--R-fun-L-id-LPAREN-L-params-RPAREN-LBRACE-L-statement-S-RBRACE =
    "fun" L-id "(" L-params ")" "{" L-statement* "}"
  
  L-params.L-params--L-id-C-COMMA-L-params-D-Q =
    L-id L-COMMA-L-params?
  
  L-COMMA-L-params.L-COMMA-L-params--COMMA-L-params =
    "," L-params
  
  
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
context-free syntax // Semantics
  
  // # Statements
                   
  
  FCT.T-execute =
    "execute" "[:" L-statement* ":]"
  
  // # Handling parameter declarations
                   
  
  FCT-SEQ.T-collect-params =
    "collect-params" "[:" L-params ":]"
  
  // # Handling variable declarations
                   
  
  FCT-SEQ.T-collect-declared-vars =
    "collect-declared-vars" "[:" L-statement* ":]"
  
context-free syntax // Desugaring
  
  // # Statements
                   
  
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
variables // Meta-variables
  
  // # Statements
                   
  
  L-statement = "(:Stmt" [1-9]? ":)" {prefer}
  L-statement? = "(:Stmt" [1-9]? "?:)" {prefer}
  L-statement* = "(:Stmt" [1-9]? "*:)" {prefer}
  L-statement+ = "(:Stmt" [1-9]? "+:)" {prefer}
  L-statement* = "..." [1-9]? {prefer}
  L-statement* = "..." [1-9]? {prefer}
  L-params = "(:Params" [1-9]? ":)" {prefer}
  L-params? = "(:Params" [1-9]? "?:)" {prefer}
  L-params* = "(:Params" [1-9]? "*:)" {prefer}
  L-params+ = "(:Params" [1-9]? "+:)" {prefer}
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
// SDF comments
  
  // # Statements
                   
  
  
  // # Handling parameter declarations
                   
  
  
  // # Handling variable declarations
                   
  
  
sorts // ASTs
  T-start
